1.高阶函数

变量f现在已经指向了abs函数本身
>>> f = abs
>>> f(-10)
10

传入函数
变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。
def add(x, y, f):
    return abs(f) + abs(f)
eg.
>>> add(-5, 6, abs)
11    
    
    
2. map函数
map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，
得到一个新的 list 并返回。注意：map()函数不改变原有的 list，而是返回一个新的 list。

eg.
假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，请利用map()函数，把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：
输入：['adam', 'LISA', 'barT']
输出：['Adam', 'Lisa', 'Bart']

代码：
def format_name(s):
    return s[0].upper()+s[1:].lower()

print map(format_name, ['adam', 'LISA', 'barT'])

3.reduce 函数
reduce()函数也是Python内置的一个高阶函数。reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，
并返回最终结果值。

reduce()还可以接收第3个可选参数，作为计算的初始值。如果把初始值设为100，计算：
reduce(f, [1, 3, 5, 7, 9], 100)
结果将变为125

eg.
Python内置了求和函数sum()，但没有求积的函数，请利用recude()来求积：
输入：[2, 4, 5, 7, 12]
输出：2*4*5*7*12的结果

def prod(x, y):
    return x*y

print reduce(prod, [2, 4, 5, 7, 12])

4.filter函数 strip函数
filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，
返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。

例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：
def is_odd(x):
    return x % 2 == 1
然后，利用filter()过滤掉偶数：
filter(is_odd, [1, 4, 6, 7, 9, 12, 17])
结果：[1, 7, 9, 17]

注意: s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。
当rm为空时，默认删除空白符（包括'\n', '\r', '\t', ' ')，如下：
a = '     123'
a.strip()
结果： '123'
a='\t\t123\r\n'
a.strip()
结果：'123'

eg.
请利用filter()过滤出1~100中平方根是整数的数，即结果应该是：
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

import math

def is_sqr(x):
    r =int(math.sqrt(x)) 
    return r*r == x
        
print filter(is_sqr, range(1, 101))

5. sorted 函数

普通用法 自动升序排序
>>>sorted([36, 5, 12, 9, 21])
[5, 9, 12, 21, 36]

高阶函数用法
sorted还可以按指定的key方法进行排序。
如令L=[1,-3,21,6,-43], 则sorted(L,key=abs)=[1,-3,6,21,-43],这句话的意思是将key方法作用在L的每个元素上得到一个新list，
对该新list进行升序排列，排序后的每个元素再还原成未用key方法前对应元素即可。
若想逆序排列只要再加一个参数reverse=True：sorted(L,key=abs，reverse=True)=[-43,21,6,-3,1]

如果我们要实现倒序排序，只需要编写一个reversed_cmp函数：
def reversed_cmp(x, y):
    if x > y:
        return -1
    if x < y:
        return 1
    return 0
这样，调用 sorted() 并传入 reversed_cmp 就可以实现倒序排序：
>>> sorted([36, 5, 12, 9, 21], reversed_cmp)
[36, 21, 12, 9, 5]

eg.
对字符串排序时，有时候忽略大小写排序更符合习惯。请利用sorted()高阶函数，实现忽略大小写排序的算法。
输入：['bob', 'about', 'Zoo', 'Credit']
输出：['about', 'bob', 'Credit', 'Zoo']

def cmp_ignore_case(s1, s2):
     u1 = s1.upper()
     u2 = s2.upper()
     if u1 < u2:
        return -1
     if u1 > u2:
        return 1
     return 0

print sorted(['bob', 'about', 'Zoo', 'Credit'], cmp_ignore_case)


6.返回函数

def calc_sum(lst):
    def lazy_sum():
        return sum(lst)
    return lazy_sum
# 调用calc_sum()并没有计算出结果，而是返回函数:
>>> f = calc_sum([1, 2, 3, 4])
>>> f
<function lazy_sum at 0x1037bfaa0>
>>> f()
10

eg.
请编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积。

1)
def calc_prod(lst):
    def lazy_sum():
        l = len(lst)
        mul=1
        for i in range (0,l):
            mul = mul*lst[i]
        return mul
    return lazy_sum

f = calc_prod([1, 2, 3, 4])
print f()

2)
def calc_prod(lst):
    def lazy_sum():
        def k(x,y):
            return x*y
        return reduce(k,lst,1)
    return lazy_sum

f = calc_prod([1, 2, 3, 4])
print f()

7.python 中闭包
内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。
例如。
def calc_sum(lst):
    def lazy_sum():
        return sum(lst)
    return lazy_sum

eg.
返回闭包不能引用循环变量，请改写count()函数，让它正确返回能计算1x1、2x2、3x3的函数。
1)
def count():
    fs = []
    for i in range(1, 4):
        def f(j):
            return j*j
        r = f(i)
        fs.append(r)
    return fs
f1, f2, f3 = count()
print f1, f2, f3

2)
def count():
    fs = []
    for i in range(1, 4):
        def f(j):
            def g():
                return j*j
            return g
        r = f(i)
        fs.append(r)
    return fs
f1, f2, f3 = count()
print f1(), f2(), f3()

8.匿名函数 lambda x ： x...

>>> map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])
[1, 4, 9, 16, 25, 36, 49, 64, 81]
通过对比可以看出，匿名函数 lambda x: x * x 实际上就是：
def f(x):
    return x * x

eg.
利用匿名函数简化以下代码：
def is_not_empty(s):
    return s and len(s.strip()) > 0
filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])

代码：
print filter(lambda s: s and len(s.strip())> 0 , ['test', None, '', 'str', '  ', 'END'])


9.python装饰器

1）
装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。
装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用
就是为已经存在的对象添加额外的功能。

eg.
请编写一个performance函数，它可以打印出函数调用的时间。

import time

def performance(f):
    def r(n):
        t1 = time.time()
        k=f(n)
        t2 = time.time()
        print 'call %s() in %fs' % (f.__name__, (t2 - t1))
        return k
    return r

@performance
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))

print factorial(10)

结果：
call factorial() in 0.003242s
3628800

三层包装

eg.
上一节的@performance只能打印秒，请给 @performace 增加一个参数，允许传入's'或'ms'：

import time

def performance(unit):
    def f (f):
        def wrapper(*args,**kw):
            t1=time.time()
            r= f(*args,**kw)
            t2=time.time()
            t=(t2-t1)*1000 if unit == 'ms' else (t2-t1)
            print 'call %s() in %fs' % (f.__name__, (t2 - t1))
            return r
        return wrapper
    return f    
            

@performance('ms')
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))

print factorial(10)


参考：https://www.cnblogs.com/liudi2017/p/9251971.html

2）
 @functools.wraps() 可还原原来的函数名  

def user_login_data(f):
　　　　def wrapper(*args, **kwargs):
　　　　　　return f(*args, **kwargs)
　　　　return wrapper
    
@user_login_data
　　def num1():
　　　　print("aaa")
    
if __name__ == '__main__':
　　print(num1.__name__)

输出：
wrapper


10.functool.partial函数

functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：
>>> import functools
>>> int2 = functools.partial(int, base=2)
>>> int2('1000000')
64

eg.
请用functools.partial把这个复杂调用变成一个简单的函数.

import functools

sorted_ignore_case = functools.partial(???)

print sorted_ignore_case(['bob', 'about', 'Zoo', 'Credit'])
















