1.python 之导入模块

1)
import 模块名

如果我们只希望导入用到的math模块的某几个函数，而不是所有函数，可以用下面的语句：
from math import pow, sin, log

这样，可以直接引用 pow, sin, log 这3个函数，但math的其他函数没有导入进来：
>>> pow(2, 10)
1024.0

如果使用 from...import 导入 log 函数，势必引起冲突。这时，可以给函数起个“别名”来避免冲突：
from math import log
from logging import log as logger   # logging的log现在变成了logger
print log(10)   # 调用的是math的log
logger(10, 'import from logging')   # 调用的是logging的log

2) 动态导入模块
同样的功能，StringIO 是纯Python代码编写的，而 cStringIO 部分函数是 C 写的，因此 cStringIO 运行速度更快。
利用ImportError错误，我们经常在Python中动态导入模块：
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO
    
eg.
Python 2.6/2.7提供了json 模块，但Python 2.5以及更早版本没有json模块，不过可以安装一个simplejson模块，这两个模块提供的函数签名和
功能都一模一样。试写出导入json 模块的代码，能在Python 2.5/2.6/2.7都正常运行。

参考代码:
try:
    import json
except ImportError:
    import simplejson as json
print json.dumps({'python':2.7})


2.python 之使用 _future_
Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。
要“试用”某一新的特性，就可以通过导入__future__模块的某些功能来实现。

例如，Python 2.7的整数除法运算结果仍是整数：
>>> 10 / 3
3

但是，Python 3.x已经改进了整数的除法运算，“/”除将得到浮点数，“//”除才仍是整数：
>>> 10 / 3
3.3333333333333335
>>> 10 // 3
3

要在Python 2.7中引入3.x的除法规则，导入__future__的division：
>>> from __future__ import division
>>> print 10 / 3
3.3333333333333335

3.python之定义类并创建实例
1)
eg1.
请练习定义Person类，并创建出两个实例，打印实例，再比较两个实例是否相等。
 
参考代码:
class Person(object):
    pass
xiaoming = Person()
xiaohong = Person()
print xiaoming
print xiaohong
print xiaoming == xiaohong

类的属性可事先设定，也可动态添加。
eg2.
请创建包含两个 Person 类的实例的 list，并给两个实例的 name 赋值，然后按照 name 进行排序。

class Person(object):
    pass

p1 = Person()
p1.name = 'Bart'

p2 = Person()
p2.name = 'Adam'

p3 = Person()
p3.name = 'Lisa'

L1 = [p1, p2, p3]
L2 = sorted(L1, lambda p1, p2: cmp(p1.name, p2.name))

print L2[0].name
print L2[1].name
print L2[2].name

2)
实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。
eg.
class Person(object):
    address = 'Earth'
    def __init__(self, name):
        self.name = name
因为类属性是直接绑定在类上的，所以，访问类属性不需要创建实例，就可以直接访问：
print Person.address
# => Earth

因为类属性只有一份，所以，当Person类的address改变时，所有实例访问到的类属性都改变了。
eg.
Person.address = 'China'
print p1.address
# => 'China'
print p2.address
# => 'China'

eg.
请给 Person 类添加一个类属性 count，每创建一个实例，count 属性就加 1，这样就可以统计出一共创建了多少个 Person 的实例。

参考代码：
class Person(object):
    count = 0
    def __init__ (self,name):
        self.name = name
        Person.count = Person.count +1
    

p1 = Person('Bob')
print Person.count

p2 = Person('Alice')
print Person.count

p3 = Person('Tim')
print Person.cou


3）
python中类属性和实例属性名字冲突怎么办

eg.
class Person(object):
    address = 'Earth'
    def __init__(self, name):
        self.name = name

p1 = Person('Bob')
p2 = Person('Alice')

print 'Person.address = ' + Person.address

p1.address = 'China'
print 'p1.address = ' + p1.address

print 'Person.address = ' + Person.address
print 'p2.address = ' + p2.address
结果如下：
Person.address = Earth
p1.address = China
Person.address = Earth
p2.address = Earth

访问 p1.address 时，优先查找实例属性，返回'China'。
访问 p2.address 时，p2没有实例属性address，但是有类属性address，因此返回'Earth'。
可见，当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。

eg2.请把上节的 Person 类属性 count 改为 __count，再试试能否从实例和类访问该属性。
class Person(object):

    __count = 0

    def __init__(self, name):
        self.name = name
        Person.__count = Person.__count + 1
        print Person.__count
         
         
p1 = Person('Bob')
p2 = Person('Alice')

print Person.__count;

结果报错，因为加了双划线 ，属性只为累内部的属性，外部不可访问。

4)
python中定义实例的方法。
eg.
请给 Person 类增加一个私有属性 __score，表示分数，再增加一个实例方法 get_grade()，
能根据 __score 的值分别返回 A-优秀, B-及格, C-不及格三档。
代码:
class Person(object):

    def __init__(self, name, score):
        self.name = name
        self.__score = score

    def get_grade(self):
        if self.__score < 60:
            return 'C'
        elif self.__score>=60 and self.__score <90 :
            return 'B'
        else :
            return 'A'

p1 = Person('Bob', 90)
p2 = Person('Alice', 65)
p3 = Person('Tim', 48)

print p1.get_grade()
print p2.get_grade()
print p3.get_grade()

5）类方法
类方法可以直接修改此类，实例方法则只能修改实例属性。

如果将类属性 count 改为私有属性__count，则外部无法读取__score，但可以通过一个类方法获取，请编写类方法获得__count值。
eg.
class Person(object):

    __count = 0

    @classmethod
    def how_many(cls):
        return cls.__count
        
        
    def __init__(self, name):
        self.name = name
        Person.__count = Person.__count + 1
    
print Person.how_many()

p1 = Person('Bob')

print Person.how_many()

6）python中继承类
eg.
请参考 Student 类，编写一个 Teacher类，也继承自 Person。

参考代码：
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender

class Teacher(Person):

    def __init__(self, name, gender, course):
        super(Teacher,self).__init__(name,gender)
        self.course = course

t = Teacher('Alice', 'Female', 'English')
print t.name
print t.course

7）
函数isinstance()可以判断一个变量的类型，既可以用在Python内置的数据类型如str、list、dict，也可以用在我们自定义的类，
它们本质上都是数据类型。
用法：
>>> isinstance(p, Person)
True    # p是Person类型
>>> isinstance(p, Student)
False   # p不是Student类型
>>> isinstance(p, Teacher)
False   # p不是Teacher类型

8）
多重继承
eg.
class A(object):
    def __init__(self, a):
        print 'init A...'
        self.a = a

class B(A):
    def __init__(self, a):
        super(B, self).__init__(a)
        print 'init B...'

class C(A):
    def __init__(self, a):
        super(C, self).__init__(a)
        print 'init C...'

class D(B, C):
    def __init__(self, a):
        super(D, self).__init__(a)
        print 'init D...'

运行结果：
>>> d = D('d')
init A...
init C...
init B...
init D...



4.python初始化实例

setattr() 函数对应函数 getattr()，用于设置属性值，该属性不一定是存在的。
setattr() 语法：
setattr(object, name, value)

以下实例展示了 setattr() 函数的使用方法：
对已存在的属性进行赋值：
>>>class A(object):
...     bar = 1
... 
>>> a = A()
>>> getattr(a, 'bar')          # 获取属性 bar 值
1
>>> setattr(a, 'bar', 5)       # 设置属性 bar 值
>>> a.bar
5

eg.
请定义Person类的__init__方法，除了接受 name、gender 和 birth 外，还可接受任意关键字参数，并把他们都作为属性赋值给实例。

def Person(object):
   def __int__ (self,age,name,**kw):
         self.name=name
         ...
         for k,v in slef.iteritems():
              setattr(self,k,v)

xiaoming = Person('Xiao Ming', 'Male', '1990-1-1', job='Student')

print xiaoming.name
print xiaoming.job
   

5.python的访问限制

可见，只有以双下划线开头的"__job"不能直接被外部访问。

eg.
class Person(object):
    def __init__(self, name):
        self.name = name
        self._title = 'Mr'
        self.__job = 'Student'
p = Person('Bob')
print p.name
# => Bob
print p._title
# => Mr
print p.__job
# => Error
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Person' object has no attribute '__job'



































