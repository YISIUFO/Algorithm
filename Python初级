python 入门

1.输出 print 
如果字符串本身包含'怎么办？比如我们要表示字符串 I'm OK ，这时，可以用" "括起来表示：
"I am OK"  //  print "I am","OK"


类似的，如果字符串包含"，我们就可以用' '括起来表示：
'Learn "Python" in imooc'

既包含'又包含"：
'Bob said \"I\'m OK\".'

2. Python中raw字符串与多行字符串(抑制转义)

但是r'...'表示法不能表示多行字符串，也不能表示包含'和 "的字符串
如果要表示多行字符串，可以用r'''...'''表示

3. Python中Unicode字符串 为显示中文  ： u '''...'''        u '...'

4. python解释器的布尔运：算短路计算

1）在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，
因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。
2）在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，
因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。

所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。

5.列表list  L = [...]

1)表示方式 正数 从零开始(从最左边开始写)   l[0], l[1]...
倒数 从-1开始（-1代表最右边的值）    l[-1], l[-2]...

2)添加新元素
L.append('要插入的数据')
有序地插入  L.insert('要插入的位置','要插入的数据')，eg. L.insert('0','apple')，

3)删除数据 
l.pop() 代表删除最后一个数据，(并打印这个数据,有些编辑器打印，有些不打印)
l.pop('指定某个位置') 删除某个位置的数据，(并打印此数据，有些编辑器打印，有些不打印)

4)对list进行切片
>>> L[::2]
['Adam', 'Bart']
第三个参数表示每N个取一个，上面的 L[::2] 会每两个元素取出一个来，也就是隔一个取一个。

5）倒序切片
eg1.
对于list，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：
>>> L = ['Adam', 'Lisa', 'Bart', 'Paul']

>>> L[-2:]
['Bart', 'Paul']

>>> L[:-2]
['Adam', 'Lisa']

>>> L[-3:-1]
['Lisa', 'Bart']

>>> L[-4:-1:2]
['Adam', 'Bart']

eg2.
利用倒序切片对 1 - 100 的数列取出：
* 最后10个5的倍数。

L = range(1, 101)
print L[-46::5]

eg3.
字符串有个方法 upper() 可以把字符变成大写字母：
>>> 'abc'.upper()
'ABC'
但它会把所有字母都变成大写。请设计一个函数，它接受一个字符串，然后返回一个仅首字母变成大写的字符串。
def firstCharUpper(s):
    return s[0].upper() + s[1:]

print firstCharUpper('hello')
print firstCharUpper('sunday')
print firstCharUpper('september')

6)list合并 

zip()函数可以把两个 list 变成一个 list：
>>> zip([10, 20, 30], ['A', 'B', 'C'])
[(10, 'A'), (20, 'B'), (30, 'C')]

7）生成列表

>>> range(1, 11)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

>>> L = []
>>> for x in range(1, 11):
...    L.append(x * x)

>>> [x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


8）条件过滤
>>> [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]

请编写一个函数，它接受一个 list，然后把list中的所有字符串变成大写后返回，非字符串元素将被忽略。
def toUppers(L):
    return [x.upper() for x in L if isinstance(x, str)]
         
print toUppers(['Hello', 'world', 101])

9)多层表达式
对于字符串 'ABC' 和 '123'，可以使用两层循环，生成全排列：
>>> [m + n for m in 'ABC' for n in '123']
['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']


利用 3 层for循环的列表生成式，找出对称的 3 位数。例如，121 就是对称数，因为从右到左倒过来还是 121。
参考代码
print [100 * n1 + 10 * n2 + n3 for n1 in range(1, 10) for n2 in range(10) for n3 in range(10) if n1==n3]


6.元组 tuple (建立后不可更改) L = (...)
可正常索引使用元组，但不可添加修改。eg. t[0]

1)tuple 创建单个元素注意元素后加逗号。eg. t = (1,)
因为()既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，
导致我们得到的不是tuple，而是整数 1。
正是因为用()定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号“,”，这样就避免了歧义。


2)可变的tuple 元组中包含列表元素
t = ('a', 'b', ['A', 'B'])

7. for循环：俩种书写方式

for i in range（0，1）

for i in L    L是列表  这里表把每个L的值赋给i


8.pyhton 之 dict

花括号 {} 表示这是一个dict，然后按照 key: value, 写出来即可。dict也是一种集合。
eg.
d = {
    'Adam': 95,
    'Lisa': 85,
    'Bart': 59
}

len可以计算dict的大小。 eg. len（d）

dict使用key找到对应的值。dict的key是不可变的且不可重复。但可添加dict的元素，dict的value是可变的。
添加  eg. d['Bar']=43
删除  eg. dict.pop('age'))  #按键去删除
          dict.popitem())  #随机删除, python3.x之后是删除最后一个

得到一个dict的value
eg.d.get('Bart')

遍历dict
eg.   for key in d
          ...

9.set 
set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。
创建 set 的方式是调用 set() 并传入一个 list，list的元素将作为set的元素：
>>> s = set(['A', 'B', 'C'])
可以查看 set 的内容：
>>> print s
set(['A', 'C', 'B'])

我们可以用 in 操作符判断：
Bart是该班的同学吗？
>>> 'Bart' in s
True

请用 for 循环遍历如下的set，打印出 name: score 来。
eg1.
s = set([('Adam', 95), ('Lisa', 85), ('Bart', 59)])
s = set([('Adam', 95), ('Lisa', 85), ('Bart', 59)])
for x in s:
    print x[0] + ':', x[1]
    
   
eg2.
>>> s = set(['Adam', 'Lisa', 'Bart'])
>>> for name in s:
...     print name
... 
Lisa
Adam
Bart
     
set添加和删除新的元素
添加 eg.
>>> s = set([1, 2, 3])
>>> s.add(4)
>>> print s
set([1, 2, 3, 4])

删除 eg.
>>> s = set([1, 2, 3, 4])
>>> s.remove(4)
>>> print s
set([1, 2, 3])

如果删除的元素不存在set中，remove()会报错：
>>> s = set([1, 2, 3])
>>> s.remove(4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 4
    

10.python书写函数 

def fun_name(参数)：
    ...
    return ...
    
注意函数的引用 math.sqrt()，函数前面要加库名字。

eg1.
我们对柱子编号为a, b, c，将所有圆盘从a移到c可以描述为：
如果a只有一个圆盘，可以直接移动到c；
如果a有N个圆盘，可以看成a有1个圆盘（底盘） + (N-1)个圆盘，首先需要把 (N-1) 个圆盘移动到 b，然后，将 a的最后一个圆盘移动到c，再将b的(N-1)个圆盘移动到c。
请编写一个函数，给定输入 n, a, b, c，打印出移动的步骤：
move(n, a, b, c)
例如，输入 move(2, 'A', 'B', 'C')，打印出：
A --> B
A --> C
B --> C

代码：
def move(n, a, b, c):
    if n==1:
        print a, "-->", c
        return
    else:
        move (n-1,a,c,b)
        print a," -->",c
        move (n-1,b,a,c)

move(4, 'A', 'B', 'C')

eg2.
请定义一个 greet() 函数，它包含一个默认参数，如果没有传入，打印 'Hello, world.'，如果传入，打印 'Hello, xxx.'

代码：
def greet(name='world'):
    print 'Hello, ' + name + '.'
greet()
greet('Bart')

Python之定义可变参数
如果想让一个函数能接受任意个参数，我们就可以定义一个可变参数：
def fn(*args):
    print args
可变参数的名字前面有个 * 号，我们可以传入0个、1个或多个参数给可变参数。可变参数也不是很神秘，
Python解释器会把传入的一组参数组装成一个tuple传递给可变参数，因此，在函数内部，直接把变量 args 看成一个 tuple 就好了。


请编写接受可变参数的 average() 函数。
def average(*args):
    sum = 0.0
    l=len(args)
    if l == 0 :
        return 0.0
    for x in args:
        sum = sum + x
    return sum / l
   
print average()
print average(1, 2)
print average(1, 2, 2, 3, 4)

注意：尽可能简化代码，看情况少用变量。


11.迭代
1）
dict 对象有一个 values() 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：
d = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }
print d.values()
# [85, 95, 59]
for v in d.values():
    print v
# 85
# 95
# 59

itervalues() 方法替代 values() 方法，迭代效果完全一样。
1) values() 方法实际上把一个 dict 转换成了包含 value 的list。
2) 但是 itervalues() 方法不会转换，它会在迭代过程中依次从 dict 中取出 value，
所以 itervalues() 方法比 values() 方法节省了生成 list 所需的内存。

2）
items() 方法把dict对象转换成了包含tuple的list，我们对这个list进行迭代，可以同时获得key和value：

>>> d = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }
>>> for key, value in d.items():
...     print key, ':', value
... 
Lisa : 85
Adam : 95
Bart : 59




