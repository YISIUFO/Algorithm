python 入门

1.输出 print 
如果字符串本身包含'怎么办？比如我们要表示字符串 I'm OK ，这时，可以用" "括起来表示：
"I am OK"  //  print "I am","OK"


类似的，如果字符串包含"，我们就可以用' '括起来表示：
'Learn "Python" in imooc'

既包含'又包含"：
'Bob said \"I\'m OK\".'

2. Python中raw字符串与多行字符串(抑制转义)

但是r'...'表示法不能表示多行字符串，也不能表示包含'和 "的字符串
如果要表示多行字符串，可以用r'''...'''表示

3. Python中Unicode字符串 为显示中文  ： u '''...'''        u '...'

4. python解释器的布尔运：算短路计算

1）在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，
因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。
2）在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，
因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。

所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。

5.列表list  L = [...]

1)表示方式 正数 从零开始(从最左边开始写)   l[0], l[1]...
倒数 从-1开始（-1代表最右边的值）    l[-1], l[-2]...

2)添加新元素
L.append('要插入的数据')
有序地插入  L.insert('要插入的位置','要插入的数据')，eg. L.insert('0','apple')，

3)删除数据 
l.pop() 代表删除最后一个数据，(并打印这个数据,有些编辑器打印，有些不打印)
l.pop('指定某个位置') 删除某个位置的数据，(并打印此数据，有些编辑器打印，有些不打印)

6.元组 tuple (建立后不可更改) L = (...)
可正常索引使用元组，但不可添加修改。eg. t[0]

1)tuple 创建单个元素注意元素后加逗号。eg. t = (1,)
因为()既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，
导致我们得到的不是tuple，而是整数 1。
正是因为用()定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号“,”，这样就避免了歧义。


2)可变的tuple 元组中包含列表元素
t = ('a', 'b', ['A', 'B'])

7. for循环：俩种书写方式

for i in range（0，1）

for i in L    L是列表  这里表把每个L的值赋给i


8.pyhton 之 dict

花括号 {} 表示这是一个dict，然后按照 key: value, 写出来即可。dict也是一种集合。
eg.
d = {
    'Adam': 95,
    'Lisa': 85,
    'Bart': 59
}

len可以计算dict的大小。 eg. len（d）

dict使用key找到对应的值。dict的key是不可变的且不可重复。但可添加dict的元素，dict的value是可变的。
添加  eg. d['Bar']=43
删除  eg. dict.pop('age'))  #按键去删除
          dict.popitem())  #随机删除, python3.x之后是删除最后一个

得到一个dict的value
eg.d.get('Bart')

遍历dict
eg.   for key in d
          ...

9.set 
set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。
创建 set 的方式是调用 set() 并传入一个 list，list的元素将作为set的元素：
>>> s = set(['A', 'B', 'C'])
可以查看 set 的内容：
>>> print s
set(['A', 'C', 'B'])

我们可以用 in 操作符判断：
Bart是该班的同学吗？
>>> 'Bart' in s
True

请用 for 循环遍历如下的set，打印出 name: score 来。
eg1.
s = set([('Adam', 95), ('Lisa', 85), ('Bart', 59)])
s = set([('Adam', 95), ('Lisa', 85), ('Bart', 59)])
for x in s:
    print x[0] + ':', x[1]
    
   
eg2.
>>> s = set(['Adam', 'Lisa', 'Bart'])
>>> for name in s:
...     print name
... 
Lisa
Adam
Bart
     
set添加和删除新的元素
添加 eg.
>>> s = set([1, 2, 3])
>>> s.add(4)
>>> print s
set([1, 2, 3, 4])

删除 eg.
>>> s = set([1, 2, 3, 4])
>>> s.remove(4)
>>> print s
set([1, 2, 3])

如果删除的元素不存在set中，remove()会报错：
>>> s = set([1, 2, 3])
>>> s.remove(4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 4
    







