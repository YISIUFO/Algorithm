
深度学习框架也就像Caffe、tensorflow这些是深度学习的工具，简单来说就是库，编程时需要import caffe、import tensorflow。
作一个简单的比喻，一套深度学习框架就是这个品牌的一套积木，各个组件就是某个模型或算法的一部分，你可以自己设计如何使用积木去堆砌符合你数据集的积木。
好处是你不必重复造轮子，模型也就是积木，是给你的，你可以直接组装，但不同的组装方式，也就是不同的数据集则取决于你。
深度学习框架的出现降低了入门的门槛，你不需要从复杂的神经网络开始编代码，你可以依据需要，使用已有的模型，模型的参数你自己训练得到，
你也可以在已有模型的基础上增加自己的layer，或者是在顶端选择自己需要的分类器和优化算法（比如常用的梯度下降法）。当然也正因如此，没有什么框架是完美的，
就像一套积木里可能没有你需要的那一种积木，所以不同的框架适用的领域不完全一致。 总的来说深度学习框架提供了一些列的深度学习的组件
（对于通用的算法，里面会有实现），当需要使用新的算法的时候就需要用户自己去定义，然后调用深度学习框架的函数接口使用用户自定义的新算法。

1 TensorFlow
  我觉得应该这么定义：TensorFlow 是一个使用数据流图(data flow graphs)进行数值计算的开源软件库。在这里，他们没有将 TensorFlow 
包含在「深度学习框架」范围内，而是和 Theano 一起被包含在「图编译器(graph compilers)」类别中。 在结束了 Udacity 的 Deep Learning 
课程(https://www.udacity.com/course/deep-learning–ud730)之后，我的感觉是 TensorFlow 是一个非常好的框架，但是却非常低层。
使用 TensorFlow 需要编写大量的代码，你必须一遍又一遍地重新发明轮子。
而且我并不是唯一一个这么想的人。Andrej Karpathy 在 Twitter 上就多次吐过槽： 推文：我希望 TensorFlow 能标准化我们的代码，但它是低层面的，
所以我们在其上面的层上分道扬镳了：Slim、PrettyTensor、Keras、TFLearn … 比如：我们在 OpenAI 使用 TensorFlow，但我们似乎都更喜欢其它框架，
我们有些人还写自定义代码。几个月前，我去参加了「Google Experts Summit: TensorFlow, Machine Learning for everyone, with Sergio Guadarrama。
  Sergio 是开发 TensorFlow 的一位工程师，但他在会上没有展示 TensorFlow，而是展示了一个在 TensorFlow 上工作的更高层的库 
tf.contrib：https://www.tensorflow.org/tutorials/tflearn/。我的看法是：他们内部已经意识到如果要让更多人使用 TensorFlow，
他们就需要以更高的抽象水平在其上创建一些层，从而简化 TensorFlow 的使用。 TensorFlow 支持 Python 和 C++，也允许在 CPU 和 GPU 上的计算分布，
甚至支持使用 gRPC 进行水平扩展。 
总结：TensorFlow 非常好，但你必须了解它好在哪里。如果你不想什么事都自己手动去做和重新发明轮子，你可以使用更简单的库(安利一下 Keras)。

2 Theano
　Theano 是最老牌和最稳定的库之一。据我所知，深度学习库的开端不是 Caffe 就是 Theano。 和 TensorFlow 类似，Theano 是一个比较低层的库。
也因此它并不适合深度学习，而更适合数值计算优化。它支持自动的函数梯度计算，带有 Python 接口并集成了 Numpy，
这使得它从一开始就成为了通用深度学习领域最常使用的库之一。 今天，Theano 依然效果良好，但由于它不支持多 GPU 和水平扩展，
在 TensorFlow 的热潮下(它们针对同一个领域)，Theano 已然开始被遗忘了。

3 Keras
  Keras它的句法是相当明晰的，文档也非常好(尽管相对较新)，而且它支持我已经掌握的语言 Python。它的使用非常简单轻松;
  我们也能很直观地了解它的指令、函数和每个模块之间的链接方式。 Keras 是一个非常高层的库，可以工作在 Theano 和 TensorFlow(可以配置)之上。
  另外，Keras 强调极简主义——你只需几行代码就能构建一个神经网络。在这里你可以比较一下 Keras 和 TensorFlow 实现相同功能时所需的代码。
  
 4 Caffe
　　Caffe 是老牌中的老牌。 在我看来，Caffe 有非常好的特性，但也有一些小缺点。起初的时候它并不是一个通用框架，
  而仅仅关注计算机视觉，但它具有非常好的通用性。在我们实验室的实验中，CaffeNet 架构的训练时间在 Caffe 中比在 Keras 中(使用了 Theano 后端)少 5 倍。
  Caffe 的缺点是它不够灵活。如果你想给它来一点新改变，那你就需要使用 C++ 和 CUDA 编程，不过你也可以使用 Python 或 Matlab 接口进行一些小改变。 
  Caffe 的文档非常贫乏。你需要花大量时间检查代码才能理解它(Xavier 初始化有什么用?Glorot 是什么?) Caffe 的最大缺点之一是它的安装。
  它需要解决大量的依赖包……我曾经安装过 Caffe 两次，真正痛苦至极。 但要清楚，Caffe 并不是一无是处。在投入了生产的计算机视觉系统的工具上，
  Caffe 是无可争议的领导者。它非常稳健非常快速。我的建议是：用 Keras 进行实验和测试，然后迁移到 Caffe 中进行生产。
  
  5 Torch
　　在这个世界上每天仍有很多战争，但是一个优秀的「勇士」(西班牙语「Guerrero」)必须熟知哪些战争是需要去参加作战的，哪些是可以选择不参与的。 
  Torch 是一个很著名的框架，因巨头 Facebook 的人工智能研究所用的框架是 Torch，并且在被谷歌收购之前 DeepMind 也是用的 Torch
  (收购之后 DeepMind 转向了 TensorFlow)。Torch 的编程语言是 Lua，这就是我刚才所谈的「战争」的具体所指。在目前深度学习编程语言绝大部分以 
  Python 实现为主的大趋势下，一个以 Lua 为编程语言的框架的最大劣势莫过于此。我从未用使用过这个语言，如果我想使用 Torch 这个工具，
  毫无疑问我需要先学习 Lua 语言然后才能使用 Torch。这固然是一个合理的过程，但就我个人情况来说，我偏向于用 Python、Matlab 或者 C++的实现。

  
  
  
  
  
  
  
  
  
  
  
